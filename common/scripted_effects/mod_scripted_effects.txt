add_leader_traits_after_modification = {
	if = {
		limit = {
			species = {
				has_trait = trait_erudite
			}
		}
		if = {
			limit = {
				NOR = {
					has_trait = leader_trait_erudite
					has_leader_flag = renowned_leader
					has_leader_flag = legendary_leader
				}
			}
			add_trait_no_notify = leader_trait_erudite
		}
	}
	if = {
		limit = {
			species = {
				has_trait = trait_psionic
			}
		}
		if = {
			limit = {
				NOT = {
					has_trait = leader_trait_psionic
				}
			}
			add_trait_no_notify = leader_trait_psionic
		}
	}
}

remove_leader_traits_after_modification = {
	if = {
		limit = {
			species = {
				NOT = {
					has_trait = trait_erudite
				}
			}
		}
		if = {
			limit = {
				has_trait = leader_trait_erudite
			}
			remove_trait = leader_trait_erudite
		}
	}
	if = {
		limit = {
			species = {
				NOT = {
					has_trait = trait_psionic
				}
			}
		}
		if = {
			limit = {
				has_trait = leader_trait_psionic
			}
			remove_trait = leader_trait_psionic
		}
	}
}

create_cybernetic_species_mod = {
	species = {
		modify_species = {
			effect = {
				create_species = {
					is_mod = yes
					name = this
					plural = this
					class = this
					portrait = this
					traits = this
					can_be_modified = this
					homeworld = this
					namelist = this
					gender = this
					traits = {
						ideal_planet_class = this
						trait = trait_cybernetic
					}
				}
			}
		}
		save_event_target_as = changing_species
	}
	owner = {
		every_owned_pop = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_leader = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_pool_leader = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_envoy = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
	}
}

create_cyber_species_effect = {
	species = {
		modify_species = {
			effect = {
				create_species = {
					is_mod = yes
					name = this
					plural = this
					class = this
					portrait = this
					traits = this
					can_be_modified = this
					homeworld = this
					namelist = this
					gender = this
					traits = {
						ideal_planet_class = this
						trait = trait_cybernetic
					}
				}
				last_created_species = {
					save_global_event_target_as = cyberspecies@prev
				}
			}
		}
	}
}

upgrade_to_psionic_race = {
	species = {
		modify_species = {
			remove_trait = trait_latent_psionic
			add_trait = trait_psionic
			effect = {
				create_species = {
					name = this
					portrait = this
					plural = this
					homeworld = this
					class = this
					traits = this
					is_mod = yes
					can_be_modified = this
					gender = this
					namelist = this
					effect = {
						save_event_target_as = last_created_species
					}
				}
			}
		}
		save_event_target_as = changing_species
	}
	change_dominant_species = {
		species = event_target:last_created_species
		change_all = yes
	}
	owner = {
		every_owned_pop = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_leader = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_pool_leader = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_envoy = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
	}
}

upgrade_mechanical_to_machine = {
	species = {
		modify_species = {
			remove_trait = trait_mechanical
			add_trait = trait_machine_unit
			effect = {
				create_species = {
					name = this
					portrait = this
					plural = this
					homeworld = this
					class = MACHINE
					traits = this
					is_mod = yes
					can_be_modified = this
					gender = this
					namelist = this
					effect = {
						save_event_target_as = last_created_species
					}
				}
			}
		}
		save_event_target_as = changing_species
	}
	change_dominant_species = {
		species = event_target:last_created_species
		change_all = yes
	}
	owner = {
		every_owned_pop = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_leader = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_pool_leader = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_envoy = {
			limit = {
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
	}
}

# root/this = planet
assimilation_effect = {
	random_owned_pop = {
		limit = {
			has_citizenship_type = {
				type = citizenship_assimilation
				country = root.owner
			}
			NOT = {
				root = {
					is_planet_class = pc_cosmogenesis_world
				}
			}
		}
		if = {
			# Has Synth-Genetic Assimilation
			limit = {
				OR = {
					AND = {
						root.owner = {
							has_country_flag = synth_assimilation
						}
						OR = {
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
						OR = {
							root.owner = {
								is_machine_empire = yes
							}
							root.owner = {
								is_individual_machine = yes
							}
						}
					}
					root.owner = {
						has_tradition = tr_genetics_finish
					}
				}
			}
			kill_pop = yes
			root = {
				create_pop = {
					species = root.owner
					ethos = root.owner
				}
				owner = {
					if = {
						limit = {
							has_ascension_perk = ap_become_the_crisis
						}
						complete_crisis_objective = crisobj_purge_pops
					}
				}
			}
		}
		else = {
			random_galaxy_species = {
				limit = {
					has_species_flag = assimilation_species_of_species@prev.species
					has_species_flag = assimilation_species_of_empire@root.owner
				}
				save_event_target_as = convert_to_species
			}
			species = {
				save_event_target_as = old_species
			}
			if = {
				limit = {
					exists = event_target:convert_to_species					#should always exist
				}
				change_species = event_target:convert_to_species
				owner = {
					if = {
						limit = {
							has_ascension_perk = ap_become_the_crisis
						}
						complete_crisis_objective = crisobj_purge_pops
					}
				}
				root = {
					change_variable = {
						which = assimilation_counter
						value = -1
					}
					while = {
						#to avoid doing the random_galaxy_species thing too many times
						limit = {
							exists = event_target:old_species
							check_variable = {
								which = assimilation_counter
								value > 0
							}
							any_owned_pop = {
								is_same_value = event_target:old_species
							}
						}
						random_owned_pop = {
							limit = {
								is_exact_same_species = event_target:old_species
							}
							change_species = event_target:convert_to_species
							apply_post_assimilation_effects = yes
						}
						change_variable = {
							which = assimilation_counter
							value = -1
						}
						owner = {
							if = {
								limit = {
									has_ascension_perk = ap_become_the_crisis
								}
								complete_crisis_objective = crisobj_purge_pops
							}
						}
					}
				}
				apply_post_assimilation_effects = yes
			}
			else = {
				log_error = "No species found for \\[This.Species.GetName] pop owned by \\[This.Owner.GetName] on \\[This.Planet.GetName] to assimilate to"
			}
		}
	}
}